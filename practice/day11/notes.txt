7/18
# 복습
1. 분산: np.var()
2. 표준편차 : np.std()
3. 반올림 : np.round()
4. 올림 : np.ceil()
5. 절대값 : np.abs()
6. 버림 : np.trunc(), np.floor()
7. 부호값 출력 : np.sign()
8. 루트(square root) : np.sqrt()
9. 역순 정렬 : np.sort() -> np.flip()
            np.sort()[::-1]
10. 배열의 가장 큰 인덱스 찾기 : np.argmax()
11. 배열의 가장 작은 인덱스 찾기 : np.argmin()
12. 배열의 원소 갯수 구하기 : np.count()
13. 이미 정해진 자료형을 나중에 변경하고 싶을때 : 배열명.astype=np.___
14. 배열에서 합계, 최대, 최소값 :
    np.sum(), np.max(), np.min()
15. 슬라이싱
    arr[[3,4,2],
        [2,7,9],
        [5,1,4]]
    -> arr[0:

# =========================================================
# review1

아래 리스트 자료형 변수 (heights,weights)에는 '송파 퓌트니스' 신규회원 5명에 대해 키(height)와 몸무게(weight) 데이터 값이 들어있다
리스트 항목에 대한 데이터를 활용해서 배열로 변환 후,
[실행결과]와 같이 회원들에 대한 키, 몸무게, BMI 결과, 비만대상자(BMI 25이상) 수를 Numpy 배열을 이용하여 출력.
단, BMI 비만도=(weights/heights**2)이며, 평균키, 평균몸무게, BMI, BMI평균은 소수 셋째자리에서 반올림하여 둘째자리까지 출력
heights = [1.83, 1.76, 1.69, 1.77, 1.73]
weights = [85, 74, 59, 80, 68]
[실행결과]
신규 회원들의 키
신규 회원들의 평균 키
신규 회원들의 몸무게
신규 회원들의 평균 몸무게
신규 회원들의 BMI
신규 회원들의 평균 BMI
신규 회원 BMI 비만 대상자

1. import numpy as np
2. height, weight에 대한 리스트 자료형을 배열로 변환한다
3. BMI 공식을 대입하여 BMI를 구한다
4. for 반복문을 이용하여 bmi 지수가 25 이상인 사람을 판별

# =========================================================
# review2
다음 grade 리스트 자료형의 데이터는 송파 중학교 5명 학생들에 대한 점수(국어, 영어, 수학) 데이터 값들이다.
넘파이 배열을 이용하여 아래와 같이 국어평균, 영어평균, 수학평균 점수를 구하는 프로그램을 작성
단, 각 평균점수는 소숫점 셋째자리에서 반올림

grade = [[75,66,97],
         [77,79,63],
         [78,72,83],
         [52,85,39],
         [72,51,85]]
[실행결과]
국어점수 평균 : 70.0
영어점수 평균 : 70.6
수학점수 평균 : 83.4

# =========================================================

## 판다스 (pandas)
판다스를 사용하기 위해서는 import pandas as pd

1. Series(시리즈)
    시리즈를 만드는 방법은 딕셔너리, 리스트, 직접 입력 해서 만드는 방법이 있다
    일반적인 딕셔너리, 리스트 자료형은 pd.Series(자료형)을 통해 convert
    시리즈는 크게 index(=행)되는 부분과 values(값, =열)로 이루어짐
    * Series에 index : 행
    * DataFrame에 index : 행
    앞서 배운 인덱스[index]는 데이터의 위치를 나타내는 것과 용어는 동일하지만 의미는 다름

## Series 출력
1. 행(index)로 접근 : 시리즈객체.loc[슬라이싱]
2. 열(column)으로 접근 : 시리즈객체.iloc[슬라이싱]
(loc:location, iloc:integer location)

# 응용1 점수 80에서 100까지 슬라이싱으로 조회
# 응용2 kor, math에 대해서 슬라이싱으로 조회
# 응용3 열 90,80에 대해서 슬라이싱으로 조회

## 시리즈 조회: 시리즈에 대해서 조회가 가능, 연산식 이용
1. 간단한 수식 조회 : 시리즈[시리즈, 수식]
2. 논리연산을 이용한 수식 : 시리즈[(시리즈수식1) 논리연산 (시리즈수식2)]

# 응용
시리즈 연산자를 이용해서 열에대한 데이터가 90점 이상 100점 이하인 데이터를 조회

- &
- |
- ~

# 응용 page 204

## 시리즈 데이터 삭제 : 필요 없는 데이터를 삭제하고자 할때
del 시리즈명[인덱스]
## 시리즈 객체 삭제
del 시리즈명

## 결측치 파악하기
시리즈명.isnull() : 빈데이터가 있는지 검사
시리즈명.isna() : 시리즈명.isnull()과 동일하게 빈데이터가 있는지 검사
시리즈명.notnull() : 비어있지 않은 데이터를 검사

## 시리즈를 프레임 형태로 출력하기
시리즈.to_frame()

# 응용
1. 다음과 같이 리스트 구조로 완성하신 후, se 라는 시리즈로 변경
    city = ['서울', '부산', '대구', '인천']
    temp = [18, 17, 16, 14]
2. se 시리즈에 다음 데이터 삽입
    대전=19
3. 시리즈에서 기온이 16이상 18 미만의 데이터 조회
4. 부산 데이터를 20으로 수정
5. 서울에서 대구까지 index를 조회
6. 대구 index를 삭제
7. se 시리즈를 삭제

## 데이터프레임(DataFrame) page 205
시리즈와는 다르게 행과열로 구성된 데이터를 처리할수 있으며, 관계 데이터베이스의 테이블 구조와 동일하다
df=pd.DataFrame([[리스트구조]])  # 리스트 형태를 데이터프레임으로 변환
df=pd.DataFrame(리스트파일)      # fltmxmvkdlf파일 형태를 데이터프레임으로 변환

# 응용
아래와 같이 멋지게 데이터프레임을 완성보세요
  학과    이름  나이
컴퓨터     홍길동 20
미디어     이순신 21
인공지능    김유신 23
통계학     유관순 24
영문과     강감찬 23

1. 열 이름만 출력
2. 열 이름, 나이 출력
3. 나이가 23세 이상만 출력
4. 나이가 22세이상 25세 미만 데이터 출력
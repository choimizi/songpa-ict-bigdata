7/19
# 복습
1. Series(시리즈)에서 [  index  ]는 행에 해당되고 [  column  ]은 values(값)에 해당된다
2. 빈 데이터가 있는지 결측치를 검사하는 함수 3개는?
- isnull() : 비어있니?
- isna() : 비어있니?
- notnull() : 안 비어있니?
3. [ 데이터프레임 DataFrame ]은 행(index)과 열(column)로 데이터베이스의 테이블과 흡사하다.
4. 데이터프레임에서 특정열('kor')만 조회하고싶다
    ex) df['kor'] ==> 값만나옴
        df[['kor']] ==> kor 까지 나옴

# Pandas Series 응용
1. 다음 강수량에 대한 데이터를 참고하여 시리즈 데이터를 생성. 이때 지역명이 index 이다.
    춘천 20.50
    통영 22.30
    인천 21.70
    대전 29.10
    광주 12.80
2. '광주' index를 22.3으로 수정
3. 다음 두 도시를 index에 추가
    서울 = 28.2
    제주 = 23.3
4. 통영부터 광주까지 문자열 인덱스를 슬라이싱
5. 춘천, 서울, 제주 문자열 인덱스를 슬라이싱
6. 강수량이 23보다 크고 30미만의 데이터에 대해 조회
7. 시리즈를 Numpy 배열로 반환 후 [실행결과]와 같이 출력
HINT
1. aa = 시리즈.index : 시리즈에서 인덱스만 추출
    bb = 시리즈.values : 시리즈에서 값(열)만 추출
2. zip()으로 합치기
    -> seZip = zip(aa,bb)
3. 두개의 배열을 합친 후, 배열로 반환
    -> arr = list(seZip)
4. 합쳐진 zip 변수를 배열로 보내기
    -> arr = np.array(seZip)
    -> arr = seZip.to_numpy()
5. arr을 반복문을 이용하여 멋지게 출력

# Pandas DataFrame 응용
"""
1. 파이썬 딕셔너리 자료형을 사용하여 다음과 같은 데이터프레임을 생성. 데이터프레임 변수는 df1이다.
학교명     설립년도    순위  합격률
하버드      1636       3  3.41
예일       1701       3   4.35
프린스턴    1746       1   4.00
컬럼비아    1754       18  3.93
펜실베니아   1755       7   4.1
"""
"""
2. 파이썬 리스트 자료형을 사용하여 다음과 같은 데이터프레임을 생성.
    Python, C, Java, C++, C#은 index, 데이터프레임 변수는 df2이다.
         2022   2023   2024
Python  17.18  13.45  13.97
C       15.08  13.35  11.44
Java    11.98  12.22   7.87
C++     10.75  11.96   9.96
C#       4.25   7.43   7.16
"""

# ============================================================
## DataFrame

## 데이터프레임 데이터 삽입
1. df['열이름']=데이터: 무조건 열에 맨 뒤쪽으로 추가
2. df.loc['인덱스']= [삽입할 데이터]
3. df.insert(열삽입,열이름, [삽입할 데이터]) : 특정한 위치를 잡아서 데이터가 삽입됨

## 데이터프레임 데이터 삭제
1. df.drop([열이름], axis=0(행)/1(열),inplace=True)
    inplace는 삭제를 하게되면 바로 적용할수 있는지 여부를 결정
    => df.drop('열이름'...)으로 진행해도 됨
2. del df['열'] : 해당열을 직접 삭제
    df.drop([행], axis=행)

3. del

# dataframe1
# 응용
# 1. 열 '학번'을 삭제한 후, df에 저장. 단, inplace 옵션은 사용하지 않음.
# 2. df 데이터프레임에 열 '나이'를 삽입. 단, '이름','성적' 사이에 삽입
# 3. df 데이터프레임에서 열 '나이', '성적'을 동시에 삭제

## 데이터프레임 복사(백업) 만들기
df_backup = df.copy()

## 데이터프레임 열이름 변경하기
df.rename(columns={old열 : new열})

## 데이터프레임 소숫점 처리
pd.options.display.float_format='{:.소숫점자리}'.format

# dataframe2
# 응용
1. 순번은 학번으로, 성적은 국어로 열 이름을 변경해보세요. 단, 동시에 열 이름 적용을 진행
2. 열 '국어' 뒤에 '영어' 점수를 추가
    영어
    80
    70
    60
    90
    95
3. 열 '총점'에 모두 0 데이터를 삽입
4. 열 '총점'에 국어, 영어 점수 합계를 계산하여 총점
5. 열 '평균'에 총점/2를 계산하여 데이터를 삽입. 평균은 소숫점 둘째자리까지 표시
pd.options.display.float_format = '{:,.2f}'.format

## 데이터 연산
df[열]= df[열] + df[열]+...

## 데이터 열 조회
1. df[열이름] : 특정한 열 조회
2. df[df[열이름] 관계연산 [데이터]]] : 조건에 맞는 데이터 조회

## 데이터프레임 조회
- df.head(n) : 상위 n개 조회
- df.tail(n) : 하위 n개 조회

## 행열 전환
df.transpose() : 행/열 전환. index -> column, column -> index
==> df.T

# 응용
# 6. 평균(avg)이 85점 이상인 사람 조회
# 7. 국어 점수와 영어 점수가 모두 90점 이상인 사람 조회
# 8. 국어 점수가 90점 이상이거나 평균이 85점 이상인 사람 조회

## dataframe3
# page 215~216 진단문제
데이터 프레임을 딕셔너리 자료형을 이용하여 [실행결과]와 같이 생성


# ============================================================
## dataframe4
## 외부 데이터 가져오기
보통적으로 공공데이터와 같은 수집된 데이터를 파이썬 판다스 모듈로 가져와서 데이터 처리가 가능
1. csv 가져오기
    file1=pd.read_csv("폴더\\파일명", encoding="utf-8")
# 실습
    job.csv 파일을 읽기
2. excel 파일 가져오기
    file1=pd.read_excel("폴더\\파일명", encoding="utf-8", sheet_name="")
    : 엑셀파일을 가져오도록 하는데 sheet_name이 있는경우는 특정 sheet를 지정하여 가져온다
3. 완성된 데이터프레임 파일을 엑셀로 보내기
    df.to_excel("폴더\\파일명")

# 응용
불러온 job.csv 파일을 데이터프레임으로 가져와 age가 30대인 데이터를 조회
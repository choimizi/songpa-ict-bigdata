1. 함수에서 인자 argument 란?
 - 함수 호출시 데이터 값을 함께 실어 보낼때 데이터 값
2. 함수에서 매개변수 parameter 란?
- 함수 정의 영역에서 함수를 호출받았을 때 넘겨받은 데이터 값
3. 리스트에 무조건 마지막 항목으로 삽입하는 함수는?
- append()
4. 리스트명.pop()
- 마지막 항목이 삭제(자료구조의 stack에 해당)
5. 리스트명.clear()
- 리스트를 비움. 뼈대([]빈 리스트 구조)만 남기고 모두 삭제
6. 리스트 자료형에 특정한 위치를 정하여 삽입이 가능한 함수는?
- insert()
7. 함수에서 다중인자를 한꺼번에 받을수 있는 함수 정의영역에서 매개변수 표현 방법은?
- *args

# 응용
num=[5,1,2,7,9,8]에서 함수를 이용하여 합계와 평균을 실행결과와 같이 출력
[실행결과]
합계=32
평균 5.33333

# ==============================================================

## 인덱싱과 슬라이싱
    1. 인덱싱(indexing) : 특정한 항목 위치를 알려주는 것으로 인덱스의 시작은 항상 0이다.
    ex) alpha = ['a','b','c','d','e','f','g','h','i','j']
        g의 위치는? index 6 , alpha[6]
    2. 슬라이싱(slicing) : 인덱싱 위치를 기본으로 특정한 범위를 발췌(추출)하는 것
        리스트명(시작:종료:간격)
    ex) alpha = ['a','b','c','d','e','f','g','h','i','j']
        1) alpha 리스트 모든 항목을 슬라이싱 해보세요.
            alpha[0:]
            alpha[:]
            alpha[0:10]
        2) alpha 리스트 모든 항목에서 'd','e','f'만 추출해보세요.
            alpha[3:6]
            alpha[3:6:1]
        3) alpha 리스트의 맨 마지막 항목 하나만 추출해보세요.
            alpha[-1]

# ==============================================================

## 리스트를 활용한 유용한 함수
    1. sum(리스트변수) : 합계를 구하는 함수
    2. max(리스트변수) : 최대값을 구하는 함수
    3. min(리스트변수) : 최소값을 구하는 함수
    4. statistics.mean(리스트변수) : 평균을 구하는 함수
        단, 평균 함수를 사용할 때는 import statistics 통계함수 모듈을 가져온 뒤 사용해야 한다.
    5. 문자열.upper() : 대문자로 변환하는 함수
    6. 문자열.lower() : 소문자로 변환하는 함수
    7. 리스트변수.sort(reverse=True/False)
        : 오름차순(reverse=False), 내림차순(reverse=True)으로 정렬.
        * reverse 옵션의 default 값은 false여서 오름차순일 경우 옵션 생략 가능
        * .sort() 함수는 리스트에서만 사용이 가능
    8. 새로운변수=sorted(리스트변수,reverse=True/False)
        : sort() 함수와 동일하지만 리스트, 튜플 자료형 모두 사용이 필요하다. 이 변수는 새로운 저장 변수가 별도로 필요하다.
    9. lambda 함수 : 익명 함수로 사요자가 임의로 수식을 만들어 사용가능한 함수
         map(lambda 인자:수식)
         ex) map(lambda x:x*3, range(3)) => [0,3,6]
    10. zip(리스트1, 리스트2) : 두개의 리스트 변수를 합치는(병합하는) 함수
        ex) alpha=['a','b','c']
        num=[1,2,3]
        listzip=list(zip(alpha,num))  # => [('a',1),('b',2)('c',3)]

# ==============================================================

## 튜플(tuple) 자료형
    - 자료 항목에 대한 값의 수정, 추가가 빈번하지 않을때 사용하는 자료형
    - 수정이 안되므로 리스트로 변환해서 가공, tuple()로 다시 변환
    1. tuple(리스트변수) : 리스트 자료형을 튜플 자료형으로 변환

## 딕셔너리(dictionary) 자료형
    - key와 value가 한쌍으로 이루어진 자료형으로 저장기호는 {}
    - 키는 변하지 않는 고정 값, value는 변하는 값으로 지정
    - {'key1': 'value1', 'key2': 'value2'}
    1. 딕셔너리.keys() : 키 값만 모아 출력
    2. 딕셔너리.values() : 값(value)만 모아 출력
    3. 딕셔너리.items() : 키와 value 값을 동시에 출력

## 세트(set) 자료형
    집합의 특징을 가지고 있는 자료형. 데이터의 중복을 허용하지 않는다.

    s1={1,2,3,4,5}
    s2={4,5,6,7,8}
    1. 합집합 : s1.union(s2)                       # => s1 | s2
    2. 차집합 : s1.difference(s2)                  # => s1 - s2
    3. 교집합 : s1.intersection(s2)                # => s1 & s2
    4. 대칭차집합 : s1.symmetric_difference(s2)     # => s1 ^ s2
